{"version":3,"sources":["components/Movie/logo1.png","components/Movie/Movie.js","components/MovieLists/MovieList.js","config/api_key.js","components/Navbar/Navbar.js","components/Search/Search.js","components/Home/Home.js","config/api_url.js","components/Trending/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","movie","poster","poster_path","src","alt","id","logo1","className","key","Math","random","to","Button","color","MovieList","movies","map","Nav","props","Search","useState","query","setQuery","onSubmit","e","preventDefault","search","type","placeholder","value","autoFocus","onChange","target","Home","setMovies","loading","setLoading","spinner","Spinner","Container","searchValue","fetch","then","res","json","data","console","log","results","fetchMovies","page","a","Trending","currentPage","setCurrentPage","useEffect","onClick","hello","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1d56554.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo1.9004aea6.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\nimport logo1 from './logo1.png';\r\nimport './Movie.css';\r\nfunction Movie({ movie }) {\r\n  const poster = movie.poster_path ? (\r\n    <img\r\n      src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\r\n      alt={movie.id}\r\n    />\r\n  ) : (\r\n    <img src={logo1} alt={movie.id} />\r\n  );\r\n  return (\r\n    <div className=\"movie\">\r\n      <li key={Math.random()}>\r\n        <Link to={`/${movie.id}/details`}>{poster}</Link>\r\n      </li>\r\n      <div className=\"movie-details\">\r\n        <Button color=\"success\">More Details</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport Movie from '../Movie/Movie';\r\nfunction MovieList({ movies }) {\r\n  return (\r\n    <ul>\r\n      {movies.map((movie) => {\r\n        return <Movie movie={movie} key={movie.id} />;\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n","export const key = '27517c9ee673aa8011cae56e33f9ef4d';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Navbar.css';\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <Link to=\"/\">\r\n          <h3>Home</h3>\r\n        </Link>\r\n        <Link to=\"/trending\">\r\n          <h3>Trending</h3>\r\n        </Link>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState } from 'react';\r\nimport './search.css';\r\nfunction Search(props) {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleInputChanges = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n  const callSearch = (e) => {\r\n    e.preventDefault();\r\n    props.search(query);\r\n    setQuery('');\r\n  };\r\n  return (\r\n    <form onSubmit={callSearch}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"search move here...\"\r\n        value={query}\r\n        autoFocus\r\n        onChange={handleInputChanges}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Spinner, Container } from 'reactstrap';\r\nimport MovieList from '../MovieLists/MovieList';\r\n\r\nimport './home.css';\r\n\r\nimport { key } from '../../config/api_key';\r\nimport { searchUrl } from '../../config/api_url';\r\nimport Navbar from '../Navbar/Navbar';\r\n\r\nimport Search from '../Search/Search';\r\n\r\nfunction Home() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const search = (searchValue) => {\r\n    setLoading(true);\r\n    fetch(`${searchUrl}?api_key=${key}&query=${searchValue}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          console.log(data.results);\r\n          setMovies(data.results);\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(false);\r\n        }\r\n      });\r\n  };\r\n  let spinner = (\r\n    <div className=\"loading\">\r\n      <Spinner color=\"success\" />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Navbar />\r\n      <Container className=\"mt-3\">\r\n        <Search search={search} />\r\n        <MovieList movies={movies} />\r\n      </Container>\r\n      <Container>{loading && spinner}</Container>\r\n\r\n      {/* <Trending /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","export const trending_movies = 'https://api.themoviedb.org/3/trending/all/day';\r\nexport const searchUrl = 'https://api.themoviedb.org/3/search/movie';\r\nexport const movieDetailUrl = 'https://api.themoviedb.org/3/movie/:movieId';\r\nexport const allUrl = 'https://api.themoviedb.org/3/trending/all/week';\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Container, Spinner } from 'reactstrap';\r\nimport MovieList from '../MovieLists/MovieList';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport { key } from '../../config/api_key';\r\n\r\nconst fetchMovies = async (page) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.themoviedb.org/3/trending/all/week?api_key=${key}&page=${page}`\r\n    );\r\n    const data = await res.json();\r\n    return data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst Trending = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n      const { results } = await fetchMovies(currentPage);\r\n      console.log(results);\r\n      setMovies(results);\r\n      setLoading(false);\r\n    })();\r\n  }, [currentPage]);\r\n\r\n  let spinner = (\r\n    <div className=\"loading\">\r\n      <Spinner color=\"success\" />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Container>\r\n        <MovieList movies={movies} />\r\n        {loading && spinner}\r\n        <div className=\"load-more\">\r\n          <button\r\n            onClick={() => {\r\n              setCurrentPage(currentPage + 1);\r\n            }}\r\n          >\r\n            Load more\r\n          </button>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trending;\r\n","import React from 'react';\r\nimport Home from './components/Home/Home';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport Trending from './components/Trending/index';\r\n\r\nfunction hello() {\r\n  return (\r\n    <div>\r\n      This is next <Link to=\"/\">Home</Link>\r\n    </div>\r\n  );\r\n}\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" component={Home} exact />\r\n      <Route path=\"/trending\" component={Trending} />\r\n      <Route path=\"/:movie_id/details\" component={hello} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}